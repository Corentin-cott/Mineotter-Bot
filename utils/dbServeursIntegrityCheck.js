const mysql = require('mysql2/promise'); // Utilisation du wrapper promise
const { db_host, db_user, db_password, serv_db_name } = require('../config.json');
const { log_i, log_s, log_e, important_c, error_c, reset_c } = require('../color_code.json');

async function dbIntegrityCheck() {
  console.log(log_i + `Commande "${important_c}check-db-integrity${reset_c}" lancÃ©e. VÃ©rification de l'intÃ©gritÃ© de la base de donnÃ©es...`);

  // On prÃ©pare un tableau pour les rÃ©sultats
  const utils_results = [];

  let connection;
  try {
    // CrÃ©ation de la connexion Ã  MySQL avec le wrapper `promise`
    connection = await mysql.createConnection({
      host: db_host,
      user: db_user,
      password: db_password,
      database: serv_db_name,
    });
    console.log(log_s + 'Connexion rÃ©ussie.');
    utils_results.push({ connection: 'ğŸŸ¢ Connexion rÃ©ussie' });

    // VÃ©rifier l'intÃ©gritÃ© de la base de donnÃ©es
    await checkDatabaseIntegrity(connection, utils_results);
    console.log(log_s + 'VÃ©rification terminÃ©e.');
  } catch (error) {
    console.error(log_e + 'Erreur lors de la vÃ©rification de l\'intÃ©gritÃ© : ', error_c + error + reset_c);
    utils_results.push({ connection: 'ğŸ”´ Erreur lors de la vÃ©rification de l\'intÃ©gritÃ© : ' + error.message });
  } finally {
    if (connection) {
      await connection.end(); // Fermer la connexion proprement
    }
  }

  return utils_results;
}

async function checkDatabaseIntegrity(connection, utils_results) {
  console.log(log_i + 'VÃ©rification des tables et des donnÃ©es...' + reset_c);

  const tables = await getTables(connection);

  const expectedTables = [
    'serveurs',
    'investisseurs',
    'administrateurs',
    'serveurs_investisseurs',
    'serveurs_administrateurs',
    'serveurs_actif',
    'rcon_parameters',
  ];

  const missingTables = expectedTables.filter(table => !tables.includes(table));

  if (missingTables.length > 0) {
    console.log(log_e + 'Tables manquantes : ', error_c + missingTables.join(', ') + reset_c);
    utils_results.push({ tables: 'ğŸ”´ Tables manquantes : ' + missingTables.join(', ') });
  } else {
    console.log(log_s + 'Toutes les tables sont prÃ©sentes.' + reset_c);
    utils_results.push({ tables: 'ğŸŸ¢ Toutes les tables sont prÃ©sentes' });
  }

  await checkForeignKeyConstraints(connection, utils_results);
  await checkDataConsistency(connection, utils_results);
}

async function getTables(connection) {
  const [results] = await connection.query('SHOW TABLES;');
  return results.map(result => Object.values(result)[0]);
}

async function checkForeignKeyConstraints(connection, utils_results) {
  const query = `
    SELECT CONSTRAINT_NAME, TABLE_NAME
    FROM information_schema.KEY_COLUMN_USAGE
    WHERE TABLE_SCHEMA = ?;
  `;
  const [results] = await connection.query(query, [serv_db_name]);

  if (results.length > 0) {
    console.log(log_s + 'VÃ©rification des clÃ©s Ã©trangÃ¨res terminÃ©e.' + reset_c);
    utils_results.push({ foreign_keys: 'ğŸŸ¢ ClÃ©s Ã©trangÃ¨res trouvÃ©es' });
  } else {
    console.log(log_e + 'Aucune contrainte de clÃ© Ã©trangÃ¨re trouvÃ©e.' + reset_c);
    utils_results.push({ foreign_keys: 'ğŸ”´ Aucune contrainte de clÃ© Ã©trangÃ¨re trouvÃ©e' });
  }
}

async function checkDataConsistency(connection, utils_results) {
  const [investisseurCheck] = await connection.query(`
    SELECT si.serveur_id, si.investisseur_id
    FROM serveurs_investisseurs si
    LEFT JOIN investisseurs i ON si.investisseur_id = i.id
    WHERE i.id IS NULL;
  `);

  if (investisseurCheck.length > 0) {
    console.log(log_e + 'IncohÃ©rences trouvÃ©es dans serveurs_investisseurs : ', error_c + JSON.stringify(investisseurCheck) + reset_c);
    utils_results.push({ investisseurs: 'ğŸ”´ IncohÃ©rences trouvÃ©es dans serveurs_investisseurs' });
  } else {
    console.log(log_s + 'Aucune incohÃ©rence trouvÃ©e dans serveurs_investisseurs.' + reset_c);
    utils_results.push({ investisseurs: 'ğŸŸ¢ Aucune incohÃ©rence trouvÃ©e dans serveurs_investisseurs' });
  }

  const [adminCheck] = await connection.query(`
    SELECT sa.serveur_id, sa.admin_id
    FROM serveurs_administrateurs sa
    LEFT JOIN administrateurs a ON sa.admin_id = a.id
    WHERE a.id IS NULL;
  `);

  if (adminCheck.length > 0) {
    console.log(log_e + 'IncohÃ©rences trouvÃ©es dans serveurs_administrateurs : ', error_c + JSON.stringify(adminCheck) + reset_c);
    utils_results.push({ administrateurs: 'ğŸ”´ IncohÃ©rences trouvÃ©es dans serveurs_administrateurs' });
  } else {
    console.log(log_s + 'Aucune incohÃ©rence trouvÃ©e dans serveurs_administrateurs.' + reset_c);
    utils_results.push({ administrateurs: 'ğŸŸ¢ Aucune incohÃ©rence trouvÃ©e dans serveurs_administrateurs' });
  }
}

module.exports = { dbIntegrityCheck };
