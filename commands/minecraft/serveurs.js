const { SlashCommandBuilder } = require('discord.js');
const fetch = require('node-fetch');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('serveur')
        .setDescription('Permet la gestion des serveurs de jeux Minecraft.')
        .addStringOption(option =>
            option.setName('action')
                .setDescription('Lancer ou arr√™ter le serveur.')
                .setRequired(true)
                .addChoices(
                    { name: 'Lancer', value: 'lancer' },
                    { name: 'Arr√™ter', value: 'arr√™ter' },
                    { name: 'Informations', value: 'infos'}
                )
            )
        .addStringOption(option =>
            option.setName('serveur')
                .setDescription('Le serveur principale (La Vanilla) ou un serveur secondaire.')
                .setRequired(true)
                .setAutocomplete(true)
            ),
    async autocomplete(interaction) {
        // R√©cup√®re les donn√©es de l'API pour l'autocompl√©tion des serveurs
        const ApiLink = 'https://api.antredesloutres.fr/serveurs/actifs/jeu/Minecraft';
        try {
            const fetch = (await import('node-fetch')).default;
            const response = await fetch(ApiLink);
            if (!response.ok) {
                console.error(`[ERROR] Erreur HTTP : ${response.status}`);
                throw new Error(`[ERROR] Erreur HTTP : ${response.status}`);
            }
            const data = await response.json();
            // console.log('[INFO] Donn√©es r√©cup√©r√©es avec succ√®s : ', data);

            const choices = data.map(element => ({
                name: element.nom_serv,
                value: element.id_serv
            }));

            // console.log('[INFO] Envoi des donn√©es pour l\'autocompl√©tion : ', choices);
            await interaction.respond(choices);
        } catch (error) {
            console.error('[ERROR] Erreur lors de la r√©cup√©ration des donn√©es pour l\'autocompl√©tion : ', error);
            await interaction.respond([
                {
                    name: 'Error',
                    value: 'Une erreur est survenue !'
                }
            ]).catch(err => console.error('[ERROR] Erreur lors de la r√©ponse √† l\'interaction : ', err));
        }
    },
    async execute(interaction) {
        const id_serv = interaction.options.getString('serveur');
        const action = interaction.options.getString('action');

        const { token_api } = require('../../config.json');

        if (!id_serv) {
            // Une r√©ponse al√©atoire parmi celles propos√©es
            const responses = [
                'Vous devez choisir un serveur parmi La Vanilla ou les serveurs secondaires.',
                'Il faut choisir un serveur pour pouvoir effectuer une action.',
                'Veuillez choisir un serveur pour effectuer une action.',
                'Il semblerait que vous ayez oubli√© de choisir un serveur.',
                'Il me manque le serveur sur lequel effectuer l\'action.',
                'Je crois que vous avez oubli√© de choisir un serveur ü•∏',
                'Mmmmh il manque le serveur pour effectuer l\'action ü•∏',
                'Ouais mais en fait il faut choisir un serveur pour effectuer une action ü•∏'
            ];
            // console.log('[INFO] ' + interaction.user.username + ' a oubli√© de choisir un serveur. R√©ponse al√©atoire renvoy√©e.');
            await interaction.reply('' + responses[Math.floor(Math.random() * responses.length)]);
            return;
        }

        try {
            let ApiLink;
            if (action === 'lancer') {
                ApiLink = 'https://api.antredesloutres.fr/serveurs/start';
            } else if (action === 'arr√™ter') {
                ApiLink = 'https://api.antredesloutres.fr/serveurs/stop';
            } else {
                // Une r√©ponse al√©atoire parmi celles propos√©es
                const responses = [
                    'Vous devez choisir une action parmi lancer ou arr√™ter.',
                    'Il faut choisir une action pour pouvoir effectuer une action.',
                    'Veuillez choisir une action pour effectuer une action. Genre uh, lancer ou arr√™ter. Tu vois?',
                    'Il faut choisir une action pour pouvoir effectuer une action ü•∏',
                    "D'accord mais je ne sais pas quoi faire si vous ne choisissez pas une action ü•∏",
                ];
                // console.log('[INFO] ' + interaction.user.username + ' a oubli√© de choisir une action. R√©ponse al√©atoire renvoy√©e.');
                await interaction.reply('' + responses[Math.floor(Math.random() * responses.length)]);
                return;
            }

            const fetch = (await import('node-fetch')).default;
            const response = await fetch(ApiLink, {
                method: 'POST',
                body: JSON.stringify({ id_serv: id_serv, client_token: token_api }),
                headers: { 'Content-Type': 'application/json' }
            });

            if (!response.ok) {
                throw new Error(`Failed to process server action: ${response.status} ${response.statusText}`);
            }

            const data = await response.json();
            // console.log('[INFO] R√©sultat de la requ√™te:', data);

            if (data.status === "0") {
                await interaction.reply(`Le serveur est d√©j√† ${action === 'lancer' ? 'd√©marr√©' : 'arr√™t√©'}.`);
            } else {
                console.log(`[INFO] ${interaction.user.username} a ${action === 'lancer' ? 'd√©marr√©' : 'arr√™t√©'} le serveur ${id_serv}.`);
                await interaction.reply(`Le serveur est en cours de ${action === 'lancer' ? 'd√©marrage' : 'arr√™t'}.`);
            }
        } catch (error) {
            console.error('[ERROR] Erreur lors de la requ√™te API:', error);
            await interaction.reply(`Erreur lors de l'${action === 'lancer' ? 'd√©marrage' : 'arr√™t'} du serveur.`);
        }
    }
};
